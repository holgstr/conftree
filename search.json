[{"path":"https://holgstr.github.io/conftree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 r2p authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://holgstr.github.io/conftree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://holgstr.github.io/conftree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). conftree: Regression Trees Conformal Prediction. R package version 0.0.0.9000, https://holgstr.github.io/conftree/.","code":"@Manual{,   title = {conftree: Regression Trees With Conformal Prediction},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://holgstr.github.io/conftree/}, }"},{"path":"https://holgstr.github.io/conftree/index.html","id":"conftree-subgroups-with-regression-trees-using-conformal-prediction","dir":"","previous_headings":"","what":"Regression Trees With Conformal Prediction","title":"Regression Trees With Conformal Prediction","text":"package uses conformal prediction subgroup detection regression trees. based r2p algorithm, introduced Lee et. al (NeurIPS, 2020). conftree, improve framework extending CV+/Jackknife+. works regression model can fitted tidymodels (see list available models).","code":""},{"path":"https://holgstr.github.io/conftree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression Trees With Conformal Prediction","text":"can install current development version GitHub :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"holgstr/conftree\")"},{"path":"https://holgstr.github.io/conftree/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Regression Trees With Conformal Prediction","text":"Let’s find subgroups Washington bike share data. use tidymodels set random forest learner, 5% miscoverage rate alpha, 10-fold CV+ quantify uncertainty resulting subgroups:","code":"library(conftree) library(tidymodels) data(bikes)  # Specify the learner used for model training: set.seed(1234) randforest <- rand_forest(trees = 200, min_n = 5) %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\")  # Find optimal subgroups using conformal prediction: r2p(data = bikes,     target = \"count\",     learner = randforest,     cv_folds = 10,     alpha = 0.05,     gamma = 0.2,     lambda = 0.5) #> [1] root #> |   [2] weekday in Sun: * #> |   [3] weekday in Mon, Tue, Wed, Thu, Fri, Sat #> |   |   [4] weekday in Sat: * #> |   |   [5] weekday in Sun, Mon, Tue, Wed, Thu, Fri #> |   |   |   [6] temp <= 6.15: * #> |   |   |   [7] temp > 6.15 #> |   |   |   |   [8] temp <= 28.29 #> |   |   |   |   |   [9] month <= 2.5: * #> |   |   |   |   |   [10] month > 2.5: * #> |   |   |   |   [11] temp > 28.29: *"},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean absolute deviation of a validation set — avg_dev","title":"Helper to compute the mean absolute deviation of a validation set — avg_dev","text":"Helper compute mean absolute deviation validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean absolute deviation of a validation set — avg_dev","text":"","code":"avg_dev(valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean absolute deviation of a validation set — avg_dev","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean absolute deviation of a validation set — avg_dev","text":"average absolute deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean conformal interval length of a validation set — avg_width","title":"Helper to compute the mean conformal interval length of a validation set — avg_width","text":"Helper compute mean conformal interval length validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean conformal interval length of a validation set — avg_width","text":"","code":"avg_width(valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean conformal interval length of a validation set — avg_width","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean conformal interval length of a validation set — avg_width","text":"average conformal interval length.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"data set contains information hourly bike sharing usage Washington, D.C. years 2011-2012. target variable count, total number bikes lent users specific time.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"","code":"data(bikes)"},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"object class data.frame 727 rows 11 columns.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"subset original data, can found OpenML database (ID = 42712).","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"data frame contains following columns: season Season year year Year; 0=2011, 1=2012 month Month year holiday day public holiday (y/n) weekday Day week workingday day aworking day (y/n) weather Weather situation temp Temperature degrees celsius humidity Humidity (relative) windspeed Windspeed miles per hour count Total number bikes lent users","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regression data of the usage of rental bikes in Washington D.C., USA — bikes","text":"Fanaee-T, Hadi, Gama, Joao, \"Event labeling combining ensemble detectors background knowledge\", Progress Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg, doi:10.1007/s13748-013-0040-3. Vanschoren, Joaquin, et al. \"OpenML: networked science machine learning.\" ACM SIGKDD Explorations Newsletter 15.2 (2014): 49-60.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_crit.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the confident criterion — conf_crit","title":"Helper to compute the confident criterion — conf_crit","text":"Helper compute confident criterion","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_crit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the confident criterion — conf_crit","text":"","code":"conf_crit(width, deviation, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/conf_crit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the confident criterion — conf_crit","text":"width (number) total conformal interval length split. deviation (number) total absolute deviation split. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_crit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the confident criterion — conf_crit","text":"value confident criterion.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the conformal alpha-quantile for a vector of residuals — conf_quantile","title":"Helper to compute the conformal alpha-quantile for a vector of residuals — conf_quantile","text":"Helper compute conformal alpha-quantile vector residuals","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the conformal alpha-quantile for a vector of residuals — conf_quantile","text":"","code":"conf_quantile(residuals, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the conformal alpha-quantile for a vector of residuals — conf_quantile","text":"residuals (numeric) residuals predictions validation set. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the conformal alpha-quantile for a vector of residuals — conf_quantile","text":"conformal alpha-quantile.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conftree-package.html","id":null,"dir":"Reference","previous_headings":"","what":"conftree Package — conftree-package","title":"conftree Package — conftree-package","text":"conftree detects subgroups via recursive partitioning based confident conformal homogeneity.","code":""},{"path":[]},{"path":"https://holgstr.github.io/conftree/reference/conftree-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"conftree Package — conftree-package","text":"Maintainer: First Last first.last@example.com (ORCID)","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the confident criterion in a node. — crit_node","title":"Helper to compute the confident criterion in a node. — crit_node","text":"Helper compute confident criterion node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the confident criterion in a node. — crit_node","text":"","code":"crit_node(valid_set, alpha, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the confident criterion in a node. — crit_node","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the confident criterion in a node. — crit_node","text":"confident criterion node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a split is sensible — eval_split_cand","title":"Helper to assess if a split is sensible — eval_split_cand","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a split is sensible — eval_split_cand","text":"","code":"eval_split_cand(ids_left, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a split is sensible — eval_split_cand","text":"ids_left (integer) ids left child node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a split is sensible — eval_split_cand","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a categorical split is sensible — eval_split_cand_categorical","title":"Helper to assess if a categorical split is sensible — eval_split_cand_categorical","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a categorical split is sensible — eval_split_cand_categorical","text":"","code":"eval_split_cand_categorical(split_cand, covariate, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a categorical split is sensible — eval_split_cand_categorical","text":"split_cand (character) split point, set categories representing left child node. covariate (factor) covariate values observations parent node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a categorical split is sensible — eval_split_cand_categorical","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a numeric split is sensible — eval_split_cand_numeric","title":"Helper to assess if a numeric split is sensible — eval_split_cand_numeric","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a numeric split is sensible — eval_split_cand_numeric","text":"","code":"eval_split_cand_numeric(split_cand, covariate, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a numeric split is sensible — eval_split_cand_numeric","text":"split_cand (number) value split point. covariate (numeric) covariate values observations parent node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a numeric split is sensible — eval_split_cand_numeric","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get candidates for the next split of a tree — get_candidates","title":"Helper to get candidates for the next split of a tree — get_candidates","text":"Helper get candidates next split tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get candidates for the next split of a tree — get_candidates","text":"","code":"get_candidates(tree, x_data, valid_set, alpha, gamma, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get candidates for the next split of a tree — get_candidates","text":"tree (party) tree object. See partykit::party() details. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get candidates for the next split of a tree — get_candidates","text":"List sensible splits tree's terminal nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean prediction of the validation set — get_pred_mean","title":"Helper to compute the mean prediction of the validation set — get_pred_mean","text":"Helper compute mean prediction validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean prediction of the validation set — get_pred_mean","text":"","code":"get_pred_mean(valid_set)"},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean prediction of the validation set — get_pred_mean","text":"valid_set (data.frame) validation set. See get_valid_set() details.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean prediction of the validation set — get_pred_mean","text":"mean predicted target variable.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the next split of a tree — get_split","title":"Helper to get the next split of a tree — get_split","text":"Helper get next split tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the next split of a tree — get_split","text":"","code":"get_split(candidates, x_data)"},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the next split of a tree — get_split","text":"candidates (list) sensible splits tree's terminal nodes. See get_candidates() details. x_data (data.frame) feature data matrix.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the next split of a tree — get_split","text":"List specifying next split","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to retrieve validation set and predictions — get_valid_set","title":"Helper to retrieve validation set and predictions — get_valid_set","text":"Helper retrieve validation set predictions","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to retrieve validation set and predictions — get_valid_set","text":"","code":"get_valid_set(data, target, learner, cv_folds)"},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to retrieve validation set and predictions — get_valid_set","text":"data (data.frame). target (string) name target variable. learner (model_spec object) learner training prediction model. See parsnip::model_spec() details. cv_folds (count) number CV+ folds.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to retrieve validation set and predictions — get_valid_set","text":"Data frame predictions indices.","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to grow the tree by splitting a terminal node — grow_node","title":"Helper to grow the tree by splitting a terminal node — grow_node","text":"Helper grow tree splitting terminal node","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to grow the tree by splitting a terminal node — grow_node","text":"","code":"grow_node(node, split, x_data)"},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to grow the tree by splitting a terminal node — grow_node","text":"node (partynode) current tree structure. See partykit::partynode() details. split (list) next split. See get_split() details. x_data (data.frame) feature data matrix.","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to grow the tree by splitting a terminal node — grow_node","text":"updated tree structure.","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a party tree — plot.conftree","title":"Plot a party tree — plot.conftree","text":"Plot party tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a party tree — plot.conftree","text":"","code":"# S3 method for conftree plot(x, ...)"},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a party tree — plot.conftree","text":"x (conftree) tree containing detected subgroups. ... additional arguments.","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a party tree — plot.conftree","text":"plot.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to find all sensible splits in a covariate — process_covariate","title":"Helper to find all sensible splits in a covariate — process_covariate","text":"Helper find sensible splits covariate","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to find all sensible splits in a covariate — process_covariate","text":"","code":"process_covariate(   var_name,   x_data,   node_id,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to find all sensible splits in a covariate — process_covariate","text":"var_name (string) name feature split. x_data (data.frame) feature data matrix. node_id (count) parent node identifier. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident criterion parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to find all sensible splits in a covariate — process_covariate","text":"List sensible splits covariate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to find all sensible splits in a parent node — process_node","title":"Helper to find all sensible splits in a parent node — process_node","text":"Helper find sensible splits parent node","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to find all sensible splits in a parent node — process_node","text":"","code":"process_node(x_data, node_id, valid_set, alpha, gamma, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to find all sensible splits in a parent node — process_node","text":"x_data (data.frame) feature data matrix. node_id (count) parent node identifier. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to find all sensible splits in a parent node — process_node","text":"List sensible splits parent node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident criterion of a split — process_split_config","title":"Helper to compute the gain in confident criterion of a split — process_split_config","text":"Helper compute gain confident criterion split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident criterion of a split — process_split_config","text":"","code":"process_split_config(   ids_left,   ids_right,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident criterion of a split — process_split_config","text":"ids_left (integer) ids left child node. ids_right (integer) ids right child node. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident criterion parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident criterion of a split — process_split_config","text":"value confident criterion split.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident criterion of a categorical split — process_split_config_categorical","title":"Helper to compute the gain in confident criterion of a categorical split — process_split_config_categorical","text":"Helper compute gain confident criterion categorical split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident criterion of a categorical split — process_split_config_categorical","text":"","code":"process_split_config_categorical(   node_id,   var_name,   split_cand,   x_data,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident criterion of a categorical split — process_split_config_categorical","text":"node_id (count) parent node identifier. var_name (string) name feature split. split_cand (character) split point, set categories representing left child node. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident criterion parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident criterion of a categorical split — process_split_config_categorical","text":"List elements node_id, feature, feature_type, split_cand, ids_left_child, ids_right_child conf_crit.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident criterion of a numeric split — process_split_config_numeric","title":"Helper to compute the gain in confident criterion of a numeric split — process_split_config_numeric","text":"Helper compute gain confident criterion numeric split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident criterion of a numeric split — process_split_config_numeric","text":"","code":"process_split_config_numeric(   node_id,   var_name,   split_cand,   x_data,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident criterion of a numeric split — process_split_config_numeric","text":"node_id (count) parent node identifier. var_name (string) name feature split. split_cand (number) value split point. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident criterion parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident criterion of a numeric split — process_split_config_numeric","text":"List elements node_id, feature, feature_type, split_cand, ids_left_child, ids_right_child conf_crit.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","title":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","text":"Finding Subgroups Regression Trees Using Conformal Prediction","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","text":"","code":"r2p(   data,   target,   learner,   cv_folds = 2,   alpha = 0.05,   gamma = 0.01,   lambda = 0.5 )"},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","text":"data (data.frame) data set model training uncertainty estimation. target (string) name target variable. learner (model_spec) learner training prediction model. See parsnip::model_spec() details. cv_folds (count) number CV+ folds. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance parameter, quantifying impact average interval length relative average absolute deviation (.e. interval size vs. within-group homogeneity)","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","text":"tree.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding Subgroups With Regression Trees Using Conformal Prediction — r2p","text":"","code":"library(tidymodels) #> ── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ── #> ✔ broom        1.0.5      ✔ recipes      1.0.10 #> ✔ dials        1.2.1      ✔ rsample      1.2.0  #> ✔ dplyr        1.1.4      ✔ tibble       3.2.1  #> ✔ ggplot2      3.5.0      ✔ tidyr        1.3.1  #> ✔ infer        1.0.6      ✔ tune         1.1.2  #> ✔ modeldata    1.3.0      ✔ workflows    1.1.4  #> ✔ parsnip      1.2.0      ✔ workflowsets 1.0.1  #> ✔ purrr        1.0.2      ✔ yardstick    1.3.0  #> ── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ── #> ✖ purrr::discard() masks scales::discard() #> ✖ dplyr::filter()  masks stats::filter() #> ✖ dplyr::lag()     masks stats::lag() #> ✖ recipes::step()  masks stats::step() #> • Use suppressPackageStartupMessages() to eliminate package startup messages library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest(trees = 200, min_n = 5) %>%  set_mode(\"regression\") %>%  set_engine(\"ranger\") r2p(data = bikes,      target = \"count\",      learner = randforest,      cv_folds = 2,      alpha = 0.05,      gamma = 0.2,      lambda = 0.5) #> $tree #> [1] root #> |   [2] weekday in Sun: * #> |   [3] weekday in Mon, Tue, Wed, Thu, Fri, Sat #> |   |   [4] weekday in Sat: * #> |   |   [5] weekday in Sun, Mon, Tue, Wed, Thu, Fri #> |   |   |   [6] temp <= 6.15: * #> |   |   |   [7] temp > 6.15 #> |   |   |   |   [8] month <= 2.5: * #> |   |   |   |   [9] month > 2.5: * #>  #> $valid_set #>          .pred testing_ids     residual #> 365  19.159666           1  16.15966614 #> 1    26.937759           2  25.93775884 #> 2    90.860469           3  26.86046944 #> 3    84.404377           4   9.59562259 #> 366 103.111384           5  15.11138408 #> 367  93.255225           6   1.74477504 #> 4    90.407961           7   6.40796074 #> 368  17.670271           8   8.67027079 #> 369   8.570315           9   2.57031482 #> 5    91.389196          10  14.38919563 #> 370  93.103309          11   5.89669108 #> 371  93.116267          12  39.11626742 #> 372  94.588015          13  22.58801539 #> 373  90.848274          14  20.84827380 #> 374  19.267833          15   9.26783280 #> 6    14.349525          16  11.34952453 #> 375  31.140927          17  18.14092738 #> 376 109.876314          18  19.87631396 #> 7   102.412282          19   1.41228217 #> 8    91.986973          20  23.98697265 #> 9    20.206054          21  12.20605357 #> 10   11.396025          22   9.39602453 #> 377  91.522413          23   7.52241334 #> 378  93.772934          24  14.22706591 #> 379  84.620786          25  54.62078618 #> 11   95.742268          26  35.74226789 #> 380  18.987333          27  13.98733280 #> 12   17.604771          28  14.60477074 #> 381  85.454071          29  13.45407083 #> 13   83.374821          30  31.37482143 #> 14   70.353417          31  21.35341667 #> 15   95.357362          32   8.35736154 #> 16   91.970466          33   4.97046630 #> 382  20.885247          34  16.88524698 #> 383  14.919048          35   6.91904836 #> 17  112.498838          36  17.49883810 #> 384 123.945828          37  23.94582812 #> 385 100.738281          38   1.73828090 #> 18   99.266254          39   0.26625440 #> 386  97.435168          40  23.43516814 #> 19   15.637058          41   4.63705754 #> 20   17.459155          42  14.45915548 #> 21  123.751317          43  25.75131667 #> 22  109.331153          44   4.33115321 #> 23  106.800405          45   1.19959521 #> 387 135.066923          46   9.06692318 #> 24  143.310387          47  27.31038694 #> 25   34.322637          48  12.32263690 #> 388  13.049817          49  11.04981680 #> 389  46.027706          50  27.02770622 #> 26  100.699204          51  60.69920440 #> 390  97.965385          52   1.96538507 #> 27  103.427754          53   0.57224560 #> 391 106.765332          54  71.76533182 #> 392  20.667333          55   1.33266720 #> 28   15.543092          56   1.54309217 #> 393 134.111536          57  42.11153618 #> 394 112.975018          58   5.97501819 #> 29  115.061442          59   5.06144167 #> 30  111.191501          60   0.19150119 #> 31  111.606751          61  28.60675119 #> 32   34.161802          62  19.16180159 #> 395  25.362283          63  20.36228328 #> 396 114.142674          64  23.14267435 #> 397 114.690922          65  13.30907840 #> 398 109.689704          66  31.31029593 #> 33  127.627444          67  90.62744444 #> 34  127.026692          68  13.02669167 #> 35   27.163242          69   4.16324206 #> 36   29.324612          70  19.32461191 #> 37  123.901326          71  35.90132619 #> 399 118.652300          72   0.34770042 #> 400 124.696055          73  13.69605526 #> 38  131.078942          74   8.92105833 #> 401 155.971129          75  32.97112925 #> 39   41.078095          76  28.07809524 #> 40   19.578977          77   5.57897691 #> 402 124.431213          78 106.43121290 #> 41  159.410498          79  23.41049780 #> 403 130.939380          80  12.93937956 #> 42   87.091483          81  20.90851724 #> 404 126.356621          82  22.35662133 #> 405  31.931466          83   9.06853426 #> 406  17.558825          84  10.55882497 #> 43  123.793749          85  13.79374943 #> 44  125.655916          86   7.34408391 #> 407 151.376892          87  15.37689238 #> 45   86.842066          88   5.15793391 #> 46  133.131775          89  38.13177497 #> 408  32.881718          90  14.88171783 #> 409  25.045102          91   7.95489821 #> 410 186.256483          92  29.25648291 #> 47  219.812823          93  85.81282338 #> 48  187.081549          94  54.08154856 #> 411 162.249841          95   2.24984133 #> 412 134.189062          96  21.18906233 #> 413  28.030857          97   7.03085672 #> 49   37.838230          98  27.83822980 #> 50  213.767304          99  37.76730375 #> 414 204.393769         100  15.39376862 #> 51  116.688620         101  46.68862020 #> 415 177.571443         102  15.42855695 #> 416  68.569756         103  80.43024447 #> 52   45.931540         104  24.93153968 #> 53   36.452914         105  20.45291414 #> 54  230.337223         106  62.33722347 #> 417 205.639626         107  17.63962576 #> 418 203.038991         108  33.96100929 #> 55  208.027520         109  10.02751981 #> 419 155.153717         110  24.84628262 #> 56   34.903194         111  15.90319444 #> 57   42.717730         112  15.71772980 #> 58  215.006997         113  19.00699656 #> 420 222.854506         114  47.14549420 #> 421 210.225685         115  35.77431471 #> 422 232.734707         116  17.73470693 #> 59  242.298546         117   2.29854623 #> 423  35.681600         118  12.31840022 #> 60   39.082519         119   6.08251876 #> 424 224.298740         120  15.29874022 #> 425 249.034907         121  15.96509311 #> 426 139.165055         122  87.16505456 #> 427 222.499386         123  48.50061444 #> 428 238.308409         124  16.30840935 #> 61   61.778806         125  21.77880556 #> 429  39.771486         126  16.77148595 #> 62  282.181024         127  45.18102400 #> 430 252.374621         128  61.62537882 #> 431 285.035079         129  32.96492063 #> 63  252.616925         130  44.38307480 #> 432 205.242918         131  48.24291824 #> 64   51.716194         132  19.71619444 #> 433  39.892646         133   2.10735438 #> 65  276.419722         134   4.41972228 #> 66  245.520549         135  94.52054894 #> 67  273.928795         136   0.07120520 #> 434 222.670034         137  34.32996612 #> 435 269.828298         138  49.17170239 #> 436  55.378517         139  12.37851669 #> 68   45.944541         140   5.94454066 #> 437 236.961026         141   0.96102594 #> 69  205.241950         142 108.75804954 #> 70  302.185712         143  10.81428794 #> 438 239.901258         144  46.09874210 #> 71  286.487725         145  37.48772539 #> 72   58.801623         146   8.80162302 #> 439  37.441142         147   7.44114238 #> 440  71.841902         148  40.84190152 #> 441 297.052021         149  62.05202072 #> 73  301.945054         150  17.94505374 #> 74  304.085814         151   0.08581406 #> 442 275.028720         152   1.97127977 #> 75   63.646306         153  23.35369444 #> 76   41.724158         154  14.72415765 #> 77  295.990361         155   3.00963885 #> 78  299.717937         156  34.28206333 #> 79  302.586343         157  50.41365687 #> 443 303.078035         158  10.92196479 #> 80  279.517452         159  12.51745205 #> 444  60.158041         160   7.84195877 #> 81   50.549419         161  16.54941945 #> 82  304.692680         162  23.30731987 #> 445 294.607648         163  70.39235211 #> 446 297.765798         164  72.23420193 #> 447 242.725218         165  54.72521825 #> 83  279.769100         166  29.76909973 #> 84   62.108710         167   5.10871032 #> 85   44.410741         168  26.58925902 #> 448 220.668159         169 174.66815873 #> 86  282.915827         170  26.08417338 #> 449 316.430736         171   5.43073601 #> 87  308.708194         172  18.29180561 #> 88  284.458560         173  16.45856042 #> 89   57.601786         174  15.60178571 #> 90   53.757716         175   2.75771580 #> 450 308.271539         176  47.27153889 #> 451 306.049964         177  40.95003623 #> 91  326.357642         178   9.64235817 #> 92  320.882787         179   0.88278668 #> 93  288.033725         180  45.03372533 #> 94   59.277204         181  14.27720364 #> 95   41.245131         182  16.24513149 #> 96   89.240345         183  53.24034452 #> 97  318.552833         184  48.55283325 #> 452 311.347650         185   0.65234953 #> 453 306.338567         186  14.33856714 #> 98  289.401622         187  42.59837768 #> 454  49.211793         188  21.78820661 #> 455  46.128372         189  18.87162818 #> 456 303.333696         190  13.66630363 #> 99  304.376783         191  25.62321738 #> 100 308.010854         192   4.98914574 #> 457 308.186397         193  25.81360292 #> 101 285.171059         194  11.17105866 #> 102  50.302180         195   1.69782017 #> 458  44.145134         196   5.85486627 #> 459 306.064901         197  29.06490092 #> 103 303.665009         198  11.33499117 #> 460 305.634817         199   2.63481714 #> 461 307.459517         200  33.45951654 #> 104 270.850519         201  18.85051855 #> 462  63.283353         202  18.28335291 #> 463  49.953172         203  14.95317210 #> 105 287.938905         204  10.93890457 #> 106 317.945718         205   0.05428202 #> 464 304.954224         206  42.04577633 #> 465 314.989159         207   9.98915899 #> 466 288.417748         208  34.41774775 #> 467  52.360329         209  10.36032910 #> 107  51.940466         210   6.94046580 #> 468 299.125316         211  17.12531639 #> 108 320.119631         212  14.88036932 #> 109 310.027580         213  39.02758026 #> 469 305.155345         214  23.15534518 #> 110 289.285350         215  19.28535001 #> 470  49.895079         216  13.10492090 #> 471  40.655713         217   1.65571309 #> 111 307.901190         218  40.90118978 #> 472 315.207249         219  27.79275103 #> 112 312.919607         220   7.91960675 #> 473 298.553472         221   8.44652831 #> 474 277.048188         222  13.04818849 #> 475  46.379696         223   2.37969566 #> 113  41.218548         224  17.21854816 #> 114 291.787764         225  33.78776381 #> 115 318.798931         226  27.20106888 #> 116 313.382743         227   5.38274326 #> 117 308.200665         228   0.20066464 #> 476 286.596748         229  23.59674775 #> 118  60.247162         230  16.24716198 #> 477  45.199908         231  14.19990754 #> 119 307.943021         232  26.94302074 #> 478 299.332896         233  44.66710430 #> 479 306.078373         234   1.92162653 #> 120 300.832116         235  12.16788418 #> 480 287.923730         236  21.92373012 #> 121  51.428869         237  23.42886905 #> 481  40.203390         238  39.20339039 #> 122 314.927748         239  30.92774816 #> 482 314.232322         240  42.76767771 #> 483 314.173839         241  13.82616117 #> 484 319.573636         242  22.42636355 #> 485 287.742785         243  28.74278531 #> 486  49.928901         244  11.92890053 #> 487  43.142741         245  13.14274087 #> 488  68.095255         246  27.09525520 #> 123 312.180111         247 140.18011145 #> 489 247.887306         248 161.88730556 #> 490 246.034329         249  67.03432937 #> 491 219.840099         250 111.84009921 #> 492  47.879305         251   4.12069471 #> 124  51.018200         252  14.01820011 #> 125 329.608303         253  17.60830306 #> 493 307.634763         254  54.36523715 #> 494 305.669791         255  64.33020879 #> 495 323.450420         256  14.54957989 #> 126 265.996033         257  33.00396690 #> 127  52.678869         258  15.67886905 #> 128  49.413006         259   5.41300621 #> 129 305.798010         260  26.20199028 #> 130 289.687488         261  39.31251153 #> 131 273.325865         262  56.67413527 #> 496 287.860070         263  23.13993041 #> 497 188.004354         264  65.99564596 #> 132  58.295611         265  12.29561111 #> 498  42.934970         266   4.93496976 #> 499 274.354226         267  57.64577384 #> 500 278.118607         268  29.11860711 #> 501 196.922291         269  11.92229149 #> 133 281.871216         270   1.12878354 #> 134 284.636128         271  12.36387249 #> 502  47.402833         272  11.40283311 #> 135  41.317267         273  12.31726667 #> 136 262.851528         274  13.85152791 #> 503 293.143918         275  15.85608167 #> 137 284.432830         276  16.56717011 #> 504 293.741008         277   8.25899198 #> 505 247.627724         278   5.62772400 #> 506  47.323589         279  25.67641061 #> 507  43.427096         280   0.57290388 #> 508  89.393188         281  24.60681244 #> 138 256.329878         282  95.67012177 #> 509 277.931784         283  18.93178388 #> 139 173.836872         284  92.83687212 #> 140 163.269848         285  16.26984831 #> 141  55.556968         286   1.44303175 #> 510  37.549094         287  10.45090600 #> 511 286.936348         288  22.06365238 #> 142 260.006548         289  80.99345155 #> 512 212.806183         290 144.80618254 #> 143 267.351777         291  50.64822314 #> 513 246.943124         292  13.94312362 #> 144  45.422802         293  11.57719841 #> 145  42.652388         294  21.65238788 #> 146 256.216035         295  28.78396451 #> 147 282.399545         296  31.60045491 #> 514 302.098175         297   3.09817469 #> 515 265.968130         298 128.96812983 #> 148 242.833523         299  37.83352272 #> 516  44.780269         300  37.78026912 #> 149  31.915622         301   9.91562193 #> 150 260.302380         302  33.30238027 #> 517 259.324910         303   5.32491041 #> 518 257.293891         304   6.29389061 #> 151 248.727947         305  43.27205289 #> 519 242.477692         306   2.52230808 #> 152  35.279290         307   1.27928968 #> 520  29.240320         308   1.24031972 #> 521 224.249766         309  86.75023425 #> 522 271.466954         310  51.53304576 #> 153 259.983856         311  40.01614354 #> 523 242.623353         312  29.37664695 #> 154  77.975798         313  43.02420238 #> 524  36.180754         314   9.18075418 #> 155  43.373029         315   0.37302858 #> 156 271.694948         316  50.30505237 #> 525 294.114485         317  24.88551493 #> 526 176.088508         318  39.08850794 #> 157 182.858343         319  14.85834314 #> 527 212.213742         320   3.78625791 #> 158  35.866706         321   5.13329365 #> 159  48.561945         322  25.56194524 #> 528 253.016356         323   7.01635603 #> 160 167.666271         324  46.66627081 #> 529 234.916562         325  78.91656165 #> 530  80.145876         326  40.14587612 #> 161 233.284880         327 198.28488027 #> 162  36.746373         328  19.74637302 #> 163  44.987305         329  21.98730455 #> 164 278.639279         330   1.63927860 #> 531 303.389987         331  38.61001255 #> 165 246.674464         332  38.32553639 #> 166 231.194751         333  44.80524910 #> 167 224.572237         334  19.57223741 #> 168  35.017345         335   9.01734524 #> 169  32.335051         336   6.33505051 #> 532 242.467385         337  40.53261520 #> 170 238.296958         338   4.29695823 #> 171 163.526765         339 117.52676497 #> 172 235.474144         340   8.52585624 #> 533 193.432028         341   5.56797220 #> 173  34.143929         342  23.14392857 #> 534  30.756483         343   0.24351676 #> 535 207.788596         344  27.21140362 #> 174 235.947562         345  12.94756173 #> 536 220.736690         346  26.26330965 #> 537 237.734081         347  20.26591909 #> 175 226.063616         348   4.93638370 #> 538  42.949100         349  22.94910047 #> 176  28.343551         350  16.34355051 #> 177 227.041865         351  36.04186454 #> 178 254.441114         352  13.55888623 #> 539 180.654798         353  48.34520213 #> 179 202.890545         354  16.89054507 #> 180 210.987927         355 118.98792657 #> 181  29.189762         356  19.18976190 #> 540  24.136651         357  20.13665070 #> 541  61.950197         358  42.95019681 #> 182 180.173431         359 100.17343081 #> 542 164.267216         360  54.26721638 #> 183 175.739252         361  69.73925156 #> 184 183.939765         362  88.93976545 #> 543  37.036591         363  18.03659104 #> 544  26.242917         364  19.24291679 #> 185  58.766626         365  42.76662607 #> 545 211.946154         366  41.94615428 #> 546 212.933256         367  60.93325565 #> 186 237.502182         368  22.50218180 #> 187 242.784001         369  37.78400125 #> 547  29.899594         370   9.89959366 #> 548  30.671947         371   6.67194709 #> 549 221.420452         372  18.57954769 #> 550 196.279702         373  25.72029801 #> 551 217.790034         374  38.20996585 #> 188 237.310711         375  17.31071104 #> 552 224.044448         376  47.04444808 #> 189  24.256458         377   0.25645833 #> 553  20.374222         378   3.37422222 #> 554  48.752500         379  15.75250000 #> 190 214.896803         380  88.89680284 #> 555 263.045934         381   0.04593406 #> 191 192.949875         382  13.05012469 #> 192 231.874597         383  46.87459707 #> 556  25.612750         384  12.61275041 #> 193  21.013511         385   8.01351050 #> 557 174.137905         386  52.13790469 #> 558 237.909940         387   5.90993992 #> 194 247.538557         388   9.46144323 #> 195 257.483208         389  18.48320832 #> 196 241.168830         390 107.16883050 #> 197  28.002696         391   2.99730357 #> 198  18.783207         392   6.78320693 #> 199 213.235327         393  11.76467277 #> 559 241.894595         394  37.10540488 #> 560 267.487223         395  59.48722296 #> 561 257.779682         396  52.77968236 #> 200 255.532585         397  29.53258547 #> 201  30.136298         398   2.13629762 #> 202  24.819110         399   8.81910971 #> 562 212.498932         400  21.50106784 #> 203 259.315173         401  39.68482670 #> 204 272.946890         402   8.05310959 #> 205 242.277790         403  24.72220956 #> 206 231.678235         404   1.67823489 #> 207  25.083286         405   6.08328571 #> 563  21.717377         406   3.71737698 #> 564 221.131220         407  26.13121988 #> 565 258.815528         408  21.18447218 #> 566 274.170209         409  46.82979071 #> 208 275.339311         410  12.66068884 #> 567 246.133942         411  20.13394233 #> 209  32.283399         412   8.71660119 #> 210  21.656276         413   7.65627638 #> 568  44.872994         414   0.87299405 #> 569 224.819468         415  54.18053224 #> 211 280.523681         416  21.47631931 #> 212 271.082048         417  54.91795212 #> 570 278.278539         418   6.27853872 #> 213  31.220708         419   8.22070833 #> 214  19.739790         420   2.26020973 #> 215 243.706665         421  36.29333517 #> 216 257.996810         422  67.00318960 #> 217 269.285160         423  16.28515964 #> 218 296.433691         424   7.56630895 #> 219 282.772551         425  20.77255100 #> 220  42.070179         426  26.07017857 #> 221  33.019693         427  10.01969304 #> 222 214.517463         428  45.48253712 #> 223 217.081261         429  57.91873950 #> 571 273.114117         430  70.88588251 #> 224 320.545065         431  13.45493534 #> 572 280.502861         432  12.50286132 #> 225  35.939571         433   4.06042857 #> 573  28.784316         434  11.78431626 #> 574 289.987365         435  21.98736550 #> 575 319.779788         436  11.77978840 #> 576 362.225931         437   5.77406874 #> 226 352.803560         438  28.19644005 #> 577 295.661744         439  17.66174407 #> 227  57.494845         440  28.50515476 #> 228  37.571930         441   4.42806958 #> 578 331.351255         442  22.64874472 #> 579 238.753746         443  68.75374585 #> 229 240.234900         444 131.76509963 #> 230 316.514038         445  44.48596227 #> 231 314.154761         446  31.84523883 #> 580  71.181632         447   1.18163243 #> 232  50.098610         448  11.09860971 #> 581 346.792226         449  23.20777430 #> 582 244.006241         450  41.99375881 #> 233 310.138121         451  47.86187856 #> 583 348.179832         452  18.82016792 #> 584 275.195982         453  13.80401790 #> 585  49.601693         454   5.60169337 #> 234  46.346034         455  37.65396569 #> 586 323.633628         456  17.63362840 #> 587 336.685179         457   4.31482058 #> 235 372.816666         458   6.81666624 #> 588 330.029795         459  23.97020493 #> 236 314.747162         460  68.74716209 #> 589  49.154052         461   4.84594802 #> 590  48.422708         462  11.42270845 #> 591 340.722103         463   9.72210255 #> 237 358.461755         464  25.53824459 #> 592 309.940374         465  11.05962614 #> 593 310.560361         466   4.56036104 #> 238 320.883561         467  24.88356090 #> 239  57.144202         468   6.85579762 #> 594  55.226486         469   9.22648569 #> 595 100.870562         470 286.12943838 #> 240 389.343099         471  71.65690105 #> 596 378.025356         472  39.97464411 #> 241 345.878398         473  60.12160222 #> 242 325.637927         474  33.36207307 #> 597  64.117432         475  11.88256797 #> 243  51.039034         476  27.03903431 #> 598 232.605506         477  25.60550630 #> 599 318.166361         478  71.83363896 #> 600 343.315225         479  45.68477544 #> 244 296.132237         480  71.13223732 #> 601 321.564028         481   6.56402801 #> 245  56.338401         482   1.33840079 #> 246  40.523713         483  13.52371289 #> 247 336.749948         484  12.25005227 #> 602 293.322630         485 124.32262970 #> 603 412.519268         486  54.51926823 #> 248 263.521892         487 120.47810757 #> 604 400.414043         488  44.41404259 #> 605  71.456978         489  15.54302234 #> 249  60.453802         490  24.45380156 #> 606 363.698863         491  21.30113653 #> 607 434.418378         492  28.58162188 #> 608 319.686952         493  98.31304762 #> 250 426.118141         494  25.11814079 #> 251 382.122262         495  31.12226179 #> 252  67.090571         496   0.09057143 #> 253  60.809056         497   0.80905649 #> 254 231.954737         498 156.95473656 #> 255 256.533237         499 164.53323656 #> 256 419.715684         500  20.28431605 #> 257 430.545079         501  43.45492065 #> 609 387.876567         502 127.12343287 #> 258  71.706219         503  23.29378129 #> 259  62.863056         504  27.13694351 #> 610 241.413174         505  88.41317424 #> 260 266.552415         506  57.44758487 #> 261 417.940684         507  50.05931605 #> 611 457.388954         508  42.38895400 #> 612 392.003860         509  33.00386005 #> 262  69.057438         510  15.05743788 #> 613  50.805532         511   1.19446814 #> 614 108.865657         512  41.86565686 #> 263 427.270901         513  22.72909885 #> 615 315.413650         514 167.58634957 #> 264 429.624844         515  77.37515639 #> 265 387.755231         516  14.24476898 #> 616  81.319220         517   4.68078027 #> 266  63.089723         518  28.08972315 #> 617 448.835811         519  68.16418916 #> 618 444.073325         520 124.92667454 #> 267 492.962119         521  54.03788071 #> 619 473.149649         522  52.85035082 #> 620 428.144752         523   0.14475165 #> 268  72.247739         524  14.75226145 #> 269  70.810681         525   8.81068149 #> 621 449.097476         526  53.90252448 #> 622 293.351567         527   9.64843290 #> 270 453.785657         528  51.21434301 #> 271 468.243311         529  37.75668895 #> 623 411.630973         530  18.36902686 #> 272  74.767243         531   3.23275748 #> 273  66.682181         532  18.68218149 #> 624 190.348757         533  45.34875668 #> 625 440.450883         534  39.54911742 #> 274 398.959847         535  65.04015314 #> 626 425.139014         536  37.86098622 #> 275 413.561702         537  54.56170154 #> 627  72.561011         538   5.43898850 #> 276  63.815451         539   7.18454855 #> 277 476.201054         540   8.79894641 #> 628 422.916183         541 129.08381714 #> 629 434.081311         542  92.91868860 #> 278 471.661032         543  36.33896758 #> 630 400.781201         544  20.78120121 #> 631  66.368750         545  25.63125041 #> 279  65.003601         546  15.00360087 #> 280 456.243664         547  58.24366363 #> 281 455.659668         548  27.34033207 #> 282 149.155810         549  77.15581043 #> 283 447.726321         550 104.72632098 #> 284 405.149004         551  52.14900408 #> 632  79.094754         552   8.09475446 #> 633  55.398785         553   3.39878505 #> 285 348.385340         554 118.38534036 #> 634 461.665788         555  58.33421224 #> 635 429.760195         556  67.23980531 #> 286 482.056298         557  29.94370232 #> 636 395.311519         558  15.31151903 #> 637  69.278166         559  21.27816626 #> 638  58.110372         560  11.11037167 #> 639 428.905587         561  54.09441329 #> 287 463.121886         562  62.87811431 #> 640 455.010814         563  39.98918627 #> 641 424.843046         564  48.15695412 #> 642 394.120578         565  34.12057783 #> 643  66.203081         566  29.20308094 #> 644  50.452295         567  12.45229464 #> 288 456.631966         568  35.63196600 #> 289 492.161269         569  23.83873067 #> 645 419.761654         570  87.23834606 #> 646 471.267518         571  23.73248226 #> 647 407.025084         572   2.97491621 #> 648  77.258528         573   1.25852827 #> 290  62.281285         574  22.28128478 #> 649 429.822666         575  39.17733374 #> 650 443.841544         576  69.15845641 #> 291 444.608903         577  42.39109714 #> 651 481.148736         578   8.14873637 #> 652 417.487118         579   3.51288212 #> 653  74.607214         580   7.60721388 #> 292  62.244723         581   5.75527662 #> 654 311.701827         582  95.29817290 #> 655 459.385300         583  42.61470033 #> 293 463.101194         584  18.89880578 #> 656 454.289861         585  20.71013865 #> 657 314.708378         586 181.70837793 #> 658  78.848952         587  16.84895198 #> 294  63.783840         588  24.78384033 #> 295 465.284154         589  29.28415432 #> 296 412.900579         590 233.90057914 #> 659 446.465034         591  45.53496603 #> 297 483.633674         592  19.63367437 #> 660 435.138644         593  56.13864439 #> 298  63.750774         594   0.24922574 #> 299  62.305542         595  21.30554175 #> 661 427.177198         596  14.82280169 #> 300 488.828318         597  30.17168244 #> 662 507.129320         598  45.87068030 #> 301 448.475882         599  32.52411778 #> 663 435.690215         600  10.69021546 #> 664  70.421095         601  31.57890517 #> 302  61.137436         602  27.13743557 #> 665 399.442390         603  33.55760954 #> 666 385.469742         604 116.46974231 #> 667 472.690351         605  81.30964855 #> 303 491.352530         606  40.64747008 #> 668 400.129676         607  20.87032422 #> 669  76.745647         608  10.74564732 #> 304  65.868844         609  23.86884419 #> 305 174.295766         610 131.29576613 #> 306 419.163241         611  73.83675914 #> 307 471.870637         612  28.12936267 #> 670 464.192016         613  17.80798388 #> 671 418.421978         614  67.57802227 #> 672  63.551297         615  18.44870279 #> 673  59.153816         616  10.84618388 #> 308 501.231859         617  54.23185903 #> 674 496.882082         618  99.11791799 #> 675 521.402530         619  35.59747034 #> 309 508.381488         620  62.61851156 #> 310 422.333686         621  31.66631393 #> 311  70.087393         622   2.91260669 #> 312  77.261164         623   6.26116363 #> 676 478.749914         624  13.25008573 #> 313 387.891459         625  31.89145871 #> 314 511.832179         626  33.16782098 #> 315 500.641935         627  33.35806529 #> 677 462.040846         628  40.95915359 #> 316  64.499941         629  12.50005907 #> 678  63.558238         630   6.55823809 #> 317 484.211227         631  45.78877322 #> 679 478.488970         632  77.51102953 #> 318 492.192393         633  39.80760655 #> 319 470.588048         634  87.41195179 #> 680 340.494946         635  53.50505428 #> 681  77.117520         636   4.11752034 #> 320  71.986384         637  14.98638448 #> 682 444.641827         638  38.35817292 #> 683 299.978916         639  39.97891613 #> 684 377.431539         640 137.56846104 #> 685 439.610083         641  48.61008279 #> 321 449.158350         642  21.15835011 #> 686  81.312803         643   2.68719683 #> 687  54.382635         644  19.38263515 #> 322 140.281465         645  13.71853546 #> 688 401.276710         646  39.27671042 #> 689 468.314761         647  38.68523864 #> 323 391.517590         648  86.48240956 #> 324 376.208390         649  15.79161016 #> 325  50.481119         650  19.51888095 #> 326  59.081564         651   8.08156397 #> 690 416.284281         652  59.71571916 #> 691 439.841046         653  85.15895372 #> 327 392.385521         654  71.61447921 #> 328 405.730058         655 102.26994187 #> 329 293.326758         656 139.32675835 #> 692  75.968162         657  10.96816157 #> 330  57.476560         658   1.47656000 #> 693 410.171630         659  41.82837039 #> 694 434.247999         660  96.75200126 #> 695 457.096928         661  68.90307197 #> 331 425.091510         662  69.90849019 #> 332 425.225040         663   4.22503989 #> 333  77.824965         664   8.17503526 #> 696  61.477552         665   3.52244818 #> 334 352.299175         666  15.29917460 #> 697 395.104289         667  24.89571081 #> 335 354.828188         668   2.17181151 #> 698  70.512564         669  11.51256399 #> 336  41.624320         670   8.37567997 #> 337 361.124166         671  99.87583442 #> 699 276.793750         672 110.20624983 #> 338 386.951598         673  67.95159812 #> 339 365.561812         674  57.43818759 #> 340 357.968902         675  16.96890170 #> 341  47.805500         676  23.19450000 #> 700  43.701007         677  24.29899294 #> 701 105.245833         678 158.75416667 #> 342 253.402236         679 146.40223622 #> 702 296.877490         680 118.12250957 #> 343 380.851039         681  29.14896140 #> 344 366.970414         682   0.02958640 #> 345  46.620750         683  31.37925000 #> 346  39.338762         684   2.66123762 #> 703 383.776126         685   2.22387369 #> 347 373.473994         686  44.52600649 #> 704 307.322065         687  34.32206477 #> 348 113.539250         688  57.53925000 #> 349 343.242083         689 266.24208333 #> 350  48.418806         690  23.41880556 #> 705  54.468764         691  33.46876389 #> 351 356.330427         692   8.66957251 #> 352 294.869944         693   1.86994401 #> 706 337.241027         694  71.75897275 #> 707 262.320279         695  99.67972133 #> 353 341.034030         696  10.96597024 #> 354  40.738944         697  22.26105556 #> 708  41.357718         698  10.35771759 #> 709 305.566832         699  90.43316754 #> 355 378.428483         700 123.57151726 #> 710 300.814720         701  97.18528030 #> 711 255.040451         702 133.95954926 #> 356 286.708462         703  71.70846241 #> 712  61.396074         704  22.39607427 #> 713  50.687576         705  27.68757639 #> 714 309.923886         706  15.92388605 #> 715 350.495002         707  29.50499762 #> 357 380.492884         708  11.49288384 #> 716 266.326534         709 118.67346592 #> 358 337.348264         710  29.34826389 #> 717  64.544469         711  16.54446861 #> 718  47.486684         712  20.48668353 #> 719 334.808888         713  15.80888821 #> 359 336.086794         714  18.91320589 #> 720 308.670261         715  54.32973862 #> 721 321.526946         716  28.47305444 #> 360 294.621066         717  86.62106639 #> 722  44.544903         718  24.54490267 #> 723  40.676337         719  21.67633740 #> 361 243.005875         720 213.00587518 #> 362  95.206905         721  89.20690476 #> 724 171.940844         722 145.94084393 #> 363 295.977287         723 205.97728663 #> 364 280.417500         724 168.41749954 #> 725  49.183084         725  31.18308449 #> 726  36.896511         726  23.89651068 #> 727 168.323603         727  83.32360277 #>  #> $info #> $info$cv_folds #> [1] 2 #>  #> $info$alpha #> [1] 0.05 #>  #> $info$gamma #> [1] 0.2 #>  #> $info$lambda #> [1] 0.5 #>  #>  #> attr(,\"class\") #> [1] \"conftree\" \"r2p\""},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the total absolute deviation of a candidate split — total_dev","title":"Helper to compute the total absolute deviation of a candidate split — total_dev","text":"Helper compute total absolute deviation candidate split","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the total absolute deviation of a candidate split — total_dev","text":"","code":"total_dev(valid_set, ids_left, ids_right, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the total absolute deviation of a candidate split — total_dev","text":"valid_set (data.frame) validation set. See get_valid_set() details. ids_left (integer) ids left child node. ids_right (integer) ids right child node. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the total absolute deviation of a candidate split — total_dev","text":"total absolute deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the total conformal interval length of a candidate split — total_width","title":"Helper to compute the total conformal interval length of a candidate split — total_width","text":"Helper compute total conformal interval length candidate split","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the total conformal interval length of a candidate split — total_width","text":"","code":"total_width(valid_set, ids_left, ids_right, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the total conformal interval length of a candidate split — total_width","text":"valid_set (data.frame) validation set. See get_valid_set() details. ids_left (integer) ids left child node. ids_right (integer) ids right child node. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the total conformal interval length of a candidate split — total_width","text":"total conformal interval length.","code":""}]
