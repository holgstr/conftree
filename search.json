[{"path":"https://holgstr.github.io/conftree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 r2p authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"Conformal Trees for Robust Subgroup Detection","text":"data single continuous outcome arbitrary number numeric categorical features, want identify subgroups subjects within group share similar features outcomes, yet differ markedly groups.","code":""},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"data-bike-sharing-usage-in-washington-d-c-","dir":"Articles","previous_headings":"Regression","what":"Data: bike sharing usage in Washington, D.C.","title":"Conformal Trees for Robust Subgroup Detection","text":"Consider data Washington, D.C. bike sharing system. contains 727 observations, 10 features target variable count specifies total number bikes lent users single given day.","code":"data(bikes, package = \"conftree\")"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"select-learner","dir":"Articles","previous_headings":"Regression","what":"Select learner","title":"Conformal Trees for Robust Subgroup Detection","text":"can start, initialize regression learner tidymodels used within algorithm model data-generating process. Let us use random forest base learner.","code":"library(\"tidymodels\") forest <- rand_forest() %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\")"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"detect-subgroups","dir":"Articles","previous_headings":"Regression","what":"Detect subgroups","title":"Conformal Trees for Robust Subgroup Detection","text":"Subgroups regression data detected r2p(). need specify data set, name target variable learner object. argument cv_folds connected type uncertainty quantification used subgroup detection. Setting cv_folds = 1 runs split conformal prediction (Lei et al., 2018) fits one model 50% data using remaining data construct splits. cv_folds set integer 2 , cross validation+ used, set number observations data, jackknife+ used (Barber et al., 2021). Setting alpha = 0.1 implies 90% coverage rate prediction intervals. regularization parameter gamma can compared cp CART quantifies minimum improvement conformal homogeneity (: 1%) required warrant split given subgroup. balance parameter lambda can take values 0 1 governs trade-interval width (high values) average absolute deviation (low values). number maximum groups desired can set max_groups.","code":"groups <- r2p(   data = bikes,   target = \"count\",   learner = forest,   cv_folds = 1,   alpha = 0.1,   gamma = 0.01,   lambda = 0.5,   max_groups = 3 )"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"understand-results","dir":"Articles","previous_headings":"Regression","what":"Understand results","title":"Conformal Trees for Robust Subgroup Detection","text":"Printing conftree object provides short description decision tree, including features feature values used splits. Nodes asterisk final subgroups. can get insights calling summary(), lists subgroups identified. subgroup can characterized center (mean), average width conformal prediction interval (width) average absolute deviation outcomes group center (deviation). always good idea plot results. conftree, provide way visualize decision tree together summary statistics describing subgroups, including boxplots outcome values within given subgroup. can see, detect substantial heterogeneity data, mean outcome 49 one subgroup 335 another. Notably, conformal prediction gives us powerful tool quantify uncertainty subgroup, placing emphasis within-group homogeneity mitigating false discovery subgroups absence true covariate effects.","code":"groups #> Conformal tree with 3 subgroups: #> [1] root #> |   [2] workingday in False: * #> |   [3] workingday in True #> |   |   [4] year in 0: * #> |   |   [5] year in 1: * #> --- #> * terminal nodes (subgroups) summary(groups) #> Conformal tree with 3 subgroups: #>     n   mean  width deviation #> 1 231  49.74  81.96      0.89 #> 2 248 219.79 129.67     19.44 #> 3 248 346.23 249.48      2.33 #> --- #> Alpha:  0.1 Lambda:  0.5 Gamma:  0.01 plot(groups)"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"treatment-effects","dir":"Articles","previous_headings":"","what":"Treatment Effects","title":"Conformal Trees for Robust Subgroup Detection","text":"can also detect subgroups treatment effect problems data single continuous outcome, one features, additional binary feature interpreted treatment indicator, denoting individual belongs ‚Äútreatment‚Äù ‚Äúcontrol‚Äù group. interested detecting heterogeneity conditional average treatment effect (CATE), .e., œÑ(ùê±)=ùîº[Y(1)‚àíY(0)|ùêó=ùê±]\\tau(\\mathbf{x}) = \\mathbb{E}\\left[Y(1)-Y(0) \\, | \\, \\mathbf{X} = \\mathbf{x}\\right].","code":""},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"data-simulate-synthetic-data","dir":"Articles","previous_headings":"Treatment Effects","what":"Data: simulate synthetic data","title":"Conformal Trees for Robust Subgroup Detection","text":"construct synthetic example true treatment effects known priori using htesim package. data contains 500 observations 4 features. , true CATE function œÑ(ùê±)=x1+x22\\tau(\\mathbf{x}) = \\frac{x_{1}+x_{2}}{2}. words, CATE depend features x3x_3 x4x_4.","code":"library(htesim) set.seed(12) dgp <- dgp(p = pF_exp_x1_x2,            m = mF_x1,            t = tF_div_x1_x2,            model = \"normal\",            xmodel = \"unif\",            sd = 1) sim <- simulate(object = dgp,                 nsim = 500L,                 d = 4L)"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"select-learner-1","dir":"Articles","previous_headings":"Treatment Effects","what":"Select learner","title":"Conformal Trees for Robust Subgroup Detection","text":"example, let us try simple linear regression learner base learner. Internally, CATE estimated difference two models, œÑÃÇ(ùê±)=ŒºÃÇ1(ùê±)‚àíŒºÃÇ0(ùê±)\\hat{\\tau}(\\mathbf{x}) = \\hat{\\mu}^{1}(\\mathbf{x}) - \\hat{\\mu}^{0}(\\mathbf{x}), ŒºÃÇ1(ùê±)\\hat{\\mu}^{1}(\\mathbf{x}) trained treated individuals ŒºÃÇ0(ùê±)\\hat{\\mu}^{0}(\\mathbf{x}) untreated individuals. Subgroup detection treatment effect problems r2p_hte() similar regression case. need provide argument treatment specify name treatment indicator variable. , set cv_folds = 500 use jackknife+ uncertainty quantification. involves fitting 1000 linear models, 2 (treatment control) 500 folds represent leave-one-setting jackknife+.","code":"linear <- linear_reg() %>%   set_mode(\"regression\") %>%   set_engine(\"lm\")"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"detect-subgroups-1","dir":"Articles","previous_headings":"Treatment Effects","what":"Detect subgroups","title":"Conformal Trees for Robust Subgroup Detection","text":"","code":"groups_hte <- r2p_hte(   data = sim,   target = \"y\",   learner = linear,   cv_folds = 500,   alpha = 0.1,   gamma = 0.01,   lambda = 0.5,   max_groups = 8,   treatment = \"trt\" )"},{"path":"https://holgstr.github.io/conftree/articles/conftree.html","id":"understand-results-1","dir":"Articles","previous_headings":"Treatment Effects","what":"Understand results","title":"Conformal Trees for Robust Subgroup Detection","text":"plot treatment effect problems regression data, group center related statistics computed using CATE estimates model.","code":"plot(groups_hte)"},{"path":"https://holgstr.github.io/conftree/articles/experiments.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Experiments","text":"","code":"library(\"conftree\") library(\"partykit\") library(\"rpart\") library(\"tidymodels\")"},{"path":"https://holgstr.github.io/conftree/articles/experiments.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Experiments","text":"experiment, use 6 regression data sets. Data sets retrieved OpenML identified via unique ID. detailed description can found corresponding OpenML website entry. rearrange data set target column last column data. standardize target variables results comparable across data sets.","code":"library(\"mlr3oml\") # Bikes (n = 727, k = 10, target = \"count\") data(bikes, package = \"conftree\") # Abalone (n = 6497, k = 8, target \"rings\") abalone <- as.data.frame(odt(id = 44956)$data) # Diamonds (n = 53940, k = 10, target \"price\") diamonds <- as.data.frame(odt(id = 42225)$data) # Elevators (n = 16599, k = 18, target \"Goal\") elevators <- as.data.frame(odt(id = 216)$data) elevators[1:16] <- lapply(elevators[1:16], as.numeric) # Miami Housing (n = 13932, k = 15, target \"SALE_PRC\") miami <- as.data.frame(odt(id = 43093)$data[,-c(3)]) miami[1:16] <- lapply(miami[1:16], as.numeric) # Wines (n = 6497, k = 11, target \"quality\") wines <- as.data.frame(odt(id = 287)$data) abalone <- abalone[c(setdiff(names(abalone), \"rings\"), \"rings\")] diamonds <- diamonds[c(setdiff(names(diamonds), \"price\"), \"price\")] elevators <- elevators[c(setdiff(names(elevators), \"Goal\"), \"Goal\")] miami <- miami[c(setdiff(names(miami), \"SALE_PRC\"), \"SALE_PRC\")] wines <- wines[c(setdiff(names(wines), \"quality\"), \"quality\")]  datasets <- list(\"abalone\" = abalone, \"bikes\" = bikes, \"diamonds\" = diamonds, \"elevators\" = elevators, \"miami\" = miami, \"wines\" = wines) datasets <- list(\"abalone\" = abalone, \"bikes\" = bikes, \"diamonds\" = diamonds, \"elevators\" = elevators, \"miami\" = miami, \"wines\" = wines) datasets <- lapply(datasets, function(df) {   last <- ncol(df)   df[[last]] <- (df[[last]] - mean(df[[last]], na.rm = TRUE)) / sd(df[[last]], na.rm = TRUE)   df })"},{"path":[]},{"path":"https://holgstr.github.io/conftree/articles/experiments.html","id":"setup","dir":"Articles","previous_headings":"Experiments","what":"Setup","title":"Experiments","text":"use random forest base learner set R2P/R2P+ hyperparameters Œª=0.5\\lambda = 0.5, Œ≥=0.01\\gamma = 0.01 max_groups left default 1010. R2P+, use cv_folds = 20. , set Œ±=0.2\\alpha = 0.2, means least 4 observations must placed potential subgroup. Note setting Œ±\\alpha relatively large value allows us study R2P R2P+ comparable setting, since n=100n = 100 want limit ability detect subgroups theoretical requirements conformal guarantees, asks Œ±‚â•1nl+1\\alpha \\geq \\frac{1}{n_{l}+1} subgroup size nln_l. define functions run experiments aggregate results. four measures, report means standard deviations R2P R2P+, respectively.","code":"process_data <- function(data) {      ## Learner   forest <- rand_forest() %>%      set_mode(\"regression\") %>%      set_engine(\"ranger\")   ## R2P   g_r2p <- r2p(   data = data,   target = colnames(data)[ncol(data)],   learner = forest,   cv_folds = 1,   alpha = 0.2,   gamma = 0.01,   lambda = 0.5,   max_groups = 10 )    ## Learner   forest <- rand_forest() %>%      set_mode(\"regression\") %>%      set_engine(\"ranger\")   ## R2P+   g_r2pp <- r2p(   data = data,   target = colnames(data)[ncol(data)],   learner = forest,   cv_folds = 20,   alpha = 0.2,   gamma = 0.01,   lambda = 0.5,   max_groups = 10 )   list(g_r2p, g_r2pp) } run_data <- function(data, rep, n_sample) {   # Initialize result variables   n_groups_r2p <- NULL   n_groups_r2pp <- NULL   avg_width_r2p <- NULL   avg_width_r2pp <- NULL   vac_r2p <- NULL   vac_r2pp <- NULL   vin_r2p <- NULL   vin_r2pp <- NULL      # Loop through repetitions   for (i in seq_len(rep)) {     sample_s <- data[sample(nrow(data), n_sample), ]     pis <- process_data(sample_s)     n_groups_r2p[i] <- pis[[1]]$info$n_groups     n_groups_r2pp[i] <- pis[[2]]$info$n_groups     group_ids_r2p <- nodeids(pis[[1]]$tree, terminal = TRUE)     group_ids_r2pp <- nodeids(pis[[2]]$tree, terminal = TRUE)     avg_width_r2p[i] <- mean(as.numeric(tree_width(pis[[1]]$tree,                                                     pis[[1]]$valid_set,                                                     pis[[1]]$info$alpha))[group_ids_r2p])     avg_width_r2pp[i] <- mean(as.numeric(tree_width(pis[[2]]$tree,                                                     pis[[2]]$valid_set,                                                     pis[[2]]$info$alpha))[group_ids_r2pp])     vac_r2p[i] <- pis[[1]]$info$var_ac     vac_r2pp[i] <- pis[[2]]$info$var_ac     vin_r2p[i] <- pis[[1]]$info$var_in     vin_r2pp[i] <- pis[[2]]$info$var_in   }      # Create data frames to store results   df_r2p <- data.frame(     n_groups = n_groups_r2p,     avg_width = avg_width_r2p,     var_ac = vac_r2p,     var_in = vin_r2p   )      df_r2pp <- data.frame(     n_groups = n_groups_r2pp,     avg_width = avg_width_r2pp,     var_ac = vac_r2pp,     var_in = vin_r2pp   )      # Return both data frames   list(\"r2p\" = df_r2p, \"r2p_plus\" = df_r2pp)    }  agg_data <- function(results) {   lapply(results, function(x) {     means <- colMeans(x, na.rm = TRUE)     sds <- apply(x, 2, function(x) {sd(x, na.rm = TRUE)})     data.frame(mean = means, sd = sds)   }) }"},{"path":"https://holgstr.github.io/conftree/articles/experiments.html","id":"run","dir":"Articles","previous_headings":"Experiments","what":"Run","title":"Experiments","text":"","code":"set.seed(123) final_res <- lapply(datasets, function(x) {agg_data(run_data(x, 500, 100))})"},{"path":"https://holgstr.github.io/conftree/articles/experiments.html","id":"results","dir":"Articles","previous_headings":"Experiments","what":"Results","title":"Experiments","text":"","code":"final_res #> $abalone #> $abalone$r2p #>                mean        sd #> n_groups  2.9320000 1.1841370 #> avg_width 1.7192092 0.3758183 #> var_ac    0.3246851 0.2114961 #> var_in    0.7200171 0.2330315 #>  #> $abalone$r2p_plus #>                mean        sd #> n_groups  4.1040000 1.7073412 #> avg_width 1.5541796 0.2754160 #> var_ac    0.3935642 0.2171481 #> var_in    0.6212842 0.2048562 #>  #>  #> $bikes #> $bikes$r2p #>                mean        sd #> n_groups  3.8220000 1.5293770 #> avg_width 1.1479217 0.2350975 #> var_ac    0.4396868 0.2385617 #> var_in    0.5108834 0.2329907 #>  #> $bikes$r2p_plus #>                mean        sd #> n_groups  6.5420000 1.9452001 #> avg_width 0.8839908 0.1341617 #> var_ac    0.6397187 0.1880607 #> var_in    0.2838799 0.1090213 #>  #>  #> $diamonds #> $diamonds$r2p #>                mean        sd #> n_groups  5.0740000 1.4030185 #> avg_width 0.6886794 0.2402770 #> var_ac    0.8467990 0.4450025 #> var_in    0.2719968 0.1242952 #>  #> $diamonds$r2p_plus #>                mean         sd #> n_groups  7.9900000 1.61961301 #> avg_width 0.6229672 0.16552796 #> var_ac    0.9429163 0.41577069 #> var_in    0.1881956 0.07277692 #>  #>  #> $elevators #> $elevators$r2p #>                mean        sd #> n_groups  3.1820000 1.1364237 #> avg_width 1.5252150 0.4168255 #> var_ac    0.2075417 0.3270168 #> var_in    0.8487943 0.3133283 #>  #> $elevators$r2p_plus #>                mean        sd #> n_groups  4.4960000 1.7146031 #> avg_width 1.4527899 0.3400333 #> var_ac    0.3152598 0.4022665 #> var_in    0.7816624 0.3358434 #>  #>  #> $miami #> $miami$r2p #>                mean        sd #> n_groups  3.2000000 1.1742051 #> avg_width 0.9518659 0.2809258 #> var_ac    0.1777317 0.2689256 #> var_in    0.8893836 0.4890409 #>  #> $miami$r2p_plus #>                mean        sd #> n_groups  4.8280000 1.8387981 #> avg_width 0.8086003 0.1850674 #> var_ac    0.2433055 0.2346503 #> var_in    0.7231350 0.3757193 #>  #>  #> $wines #> $wines$r2p #>                mean        sd #> n_groups  3.1240000 1.2774536 #> avg_width 2.0571390 0.3907371 #> var_ac    0.1037108 0.1071144 #> var_in    0.8915611 0.2061902 #>  #> $wines$r2p_plus #>                mean        sd #> n_groups  4.0920000 1.8639970 #> avg_width 1.9726951 0.2942497 #> var_ac    0.1380350 0.1251651 #> var_in    0.8452096 0.2142913"},{"path":"https://holgstr.github.io/conftree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Holger L√∂we. Author, maintainer.","code":""},{"path":"https://holgstr.github.io/conftree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"L√∂we H (2025). conftree: Subgroups Trees using Conformal Prediction. R package version 0.0.1, https://holgstr.github.io/conftree/.","code":"@Manual{,   title = {conftree: Subgroups with Trees using Conformal Prediction},   author = {Holger L√∂we},   year = {2025},   note = {R package version 0.0.1},   url = {https://holgstr.github.io/conftree/}, }"},{"path":"https://holgstr.github.io/conftree/index.html","id":"conftree-finding-subgroups-with-conformal-trees","dir":"","previous_headings":"","what":"Subgroups with Trees using Conformal Prediction","title":"Subgroups with Trees using Conformal Prediction","text":"R package finds subgroups data single continuous response, suitable either regression treatment effect problems. Subgroups identified via recursive partitioning, resulting interpretable tree. Conformal prediction methods (SCR, CV+ Jackknife+) leveraged find homogeneous subgroups robust uncertainty quantification. First, predictions made using arbitrary regression learner 100+ algorithms available tidymodels. , data split recursively using robust conformal criterion. conftree package implements extends theory Lee et al.¬†(NeurIPS 2020). Scope: Subgroups regression problems r2p() Subgroups treatment effects r2p_hte()","code":""},{"path":"https://holgstr.github.io/conftree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Subgroups with Trees using Conformal Prediction","text":"can install current development version GitHub :","code":"if (!require(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"holgstr/conftree\")"},{"path":"https://holgstr.github.io/conftree/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Subgroups with Trees using Conformal Prediction","text":"Let‚Äôs find subgroups Washington bike share data. use random forest tidymodels learner, 5% miscoverage rate alpha, 10 cv_folds CV+ quantify uncertainty subgroups:","code":"library(conftree) library(tidymodels) data(bikes)  set.seed(1234)  # Specify the learner to be used for model training: forest <- rand_forest() %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\")  # Find optimal subgroups: groups <- r2p(   data = bikes,   target = \"count\",   learner = forest,   cv_folds = 10,   alpha = 0.05,   gamma = 0.01,   lambda = 0.5,   max_groups = 3 )  # Display tree structure: groups$tree #> [1] root #> |   [2] weekday in Sun, Sat: * #> |   [3] weekday in Mon, Tue, Wed, Thu, Fri #> |   |   [4] weather in rain: * #> |   |   [5] weather in clear, misty: *  # Plot: plot(groups)"},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean absolute deviation of a validation set ‚Äî avg_dev","title":"Helper to compute the mean absolute deviation of a validation set ‚Äî avg_dev","text":"Helper compute mean absolute deviation validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean absolute deviation of a validation set ‚Äî avg_dev","text":"","code":"avg_dev(valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean absolute deviation of a validation set ‚Äî avg_dev","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean absolute deviation of a validation set ‚Äî avg_dev","text":"average absolute deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean conformal interval length of a validation set ‚Äî avg_width","title":"Helper to compute the mean conformal interval length of a validation set ‚Äî avg_width","text":"Helper compute mean conformal interval length validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean conformal interval length of a validation set ‚Äî avg_width","text":"","code":"avg_width(valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean conformal interval length of a validation set ‚Äî avg_width","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/avg_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean conformal interval length of a validation set ‚Äî avg_width","text":"average conformal interval length.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"data set contains information hourly bike sharing usage Washington, D.C. years 2011-2012. target variable count, total number bikes lent users specific time.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"","code":"data(bikes)"},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"object class data.frame 727 rows 11 columns.","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"subset original data, can found OpenML database (ID = 42712).","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"data frame contains following columns: season Season year year Year; 0=2011, 1=2012 month Month year holiday day public holiday (y/n) weekday Day week workingday day aworking day (y/n) weather Weather situation temp Temperature degrees celsius humidity Humidity (relative) windspeed Windspeed miles per hour count Total number bikes lent users","code":""},{"path":"https://holgstr.github.io/conftree/reference/bikes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Regression data of the usage of rental bikes in Washington D.C., USA ‚Äî bikes","text":"Fanaee-T, Hadi, Gama, Joao, \"Event labeling combining ensemble detectors background knowledge\", Progress Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg, doi:10.1007/s13748-013-0040-3. Vanschoren, Joaquin, et al. \"OpenML: networked science machine learning.\" ACM SIGKDD Explorations Newsletter 15.2 (2014): 49-60.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_homo.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute confident homogeneity ‚Äî conf_homo","title":"Helper to compute confident homogeneity ‚Äî conf_homo","text":"Helper compute confident homogeneity","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_homo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute confident homogeneity ‚Äî conf_homo","text":"","code":"conf_homo(width, deviation, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/conf_homo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute confident homogeneity ‚Äî conf_homo","text":"width (number) total conformal interval length split. deviation (number) total absolute deviation split. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_homo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute confident homogeneity ‚Äî conf_homo","text":"value confident homogeneity.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the conformal alpha-quantile for a vector of residuals ‚Äî conf_quantile","title":"Helper to compute the conformal alpha-quantile for a vector of residuals ‚Äî conf_quantile","text":"Helper compute conformal alpha-quantile vector residuals","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the conformal alpha-quantile for a vector of residuals ‚Äî conf_quantile","text":"","code":"conf_quantile(residuals, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the conformal alpha-quantile for a vector of residuals ‚Äî conf_quantile","text":"residuals (numeric) residuals predictions validation set. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conf_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the conformal alpha-quantile for a vector of residuals ‚Äî conf_quantile","text":"conformal alpha-quantile.","code":""},{"path":"https://holgstr.github.io/conftree/reference/conftree-package.html","id":null,"dir":"Reference","previous_headings":"","what":"conftree: Subgroups with Trees using Conformal Prediction ‚Äî conftree-package","title":"conftree: Subgroups with Trees using Conformal Prediction ‚Äî conftree-package","text":"Detect subgroups machine learning models numeric outcomes (regression). leverages CV+/Jackknife+ simultaneously optimize inter-group heterogeneity intra-group homogeneity. way, extension r2p algorithm, see Lee et al. (2020) arXiv:2006.07917v2. works learning algorithms regression tasks available 'tidymodels'. conftree detects subgroups via recursive partitioning based confident conformal homogeneity.","code":""},{"path":[]},{"path":"https://holgstr.github.io/conftree/reference/conftree-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"conftree: Subgroups with Trees using Conformal Prediction ‚Äî conftree-package","text":"Maintainer: Holger L√∂we hbj.loewe@gmail.com","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the confident homogeneity in a node. ‚Äî crit_node","title":"Helper to compute the confident homogeneity in a node. ‚Äî crit_node","text":"Helper compute confident homogeneity node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the confident homogeneity in a node. ‚Äî crit_node","text":"","code":"crit_node(valid_set, alpha, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the confident homogeneity in a node. ‚Äî crit_node","text":"valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/crit_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the confident homogeneity in a node. ‚Äî crit_node","text":"confident homogeneity node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a split is sensible ‚Äî eval_split_cand","title":"Helper to assess if a split is sensible ‚Äî eval_split_cand","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a split is sensible ‚Äî eval_split_cand","text":"","code":"eval_split_cand(ids_left, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a split is sensible ‚Äî eval_split_cand","text":"ids_left (integer) ids left child node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a split is sensible ‚Äî eval_split_cand","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a categorical split is sensible ‚Äî eval_split_cand_categorical","title":"Helper to assess if a categorical split is sensible ‚Äî eval_split_cand_categorical","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a categorical split is sensible ‚Äî eval_split_cand_categorical","text":"","code":"eval_split_cand_categorical(split_cand, covariate, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a categorical split is sensible ‚Äî eval_split_cand_categorical","text":"split_cand (character) split point, set categories representing left child node. covariate (factor) covariate values observations parent node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a categorical split is sensible ‚Äî eval_split_cand_categorical","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to assess if a numeric split is sensible ‚Äî eval_split_cand_numeric","title":"Helper to assess if a numeric split is sensible ‚Äî eval_split_cand_numeric","text":"checks child nodes contain enough observations result sensible quantile values. prevent alpha-quantile becomes \\(\\infty\\) \\((1 - \\alpha)(n + 1) > n\\).","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to assess if a numeric split is sensible ‚Äî eval_split_cand_numeric","text":"","code":"eval_split_cand_numeric(split_cand, covariate, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to assess if a numeric split is sensible ‚Äî eval_split_cand_numeric","text":"split_cand (number) value split point. covariate (numeric) covariate values observations parent node. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/eval_split_cand_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to assess if a numeric split is sensible ‚Äî eval_split_cand_numeric","text":"Logical value indicating child nodes contain enough observations.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get candidates for the next split of a tree ‚Äî get_candidates","title":"Helper to get candidates for the next split of a tree ‚Äî get_candidates","text":"Helper get candidates next split tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get candidates for the next split of a tree ‚Äî get_candidates","text":"","code":"get_candidates(tree, x_data, valid_set, alpha, gamma, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get candidates for the next split of a tree ‚Äî get_candidates","text":"tree (party) tree object. See partykit::party() details. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_candidates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get candidates for the next split of a tree ‚Äî get_candidates","text":"List sensible splits tree's terminal nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the mean prediction of the validation set ‚Äî get_pred_mean","title":"Helper to compute the mean prediction of the validation set ‚Äî get_pred_mean","text":"Helper compute mean prediction validation set","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the mean prediction of the validation set ‚Äî get_pred_mean","text":"","code":"get_pred_mean(valid_set)"},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the mean prediction of the validation set ‚Äî get_pred_mean","text":"valid_set (data.frame) validation set. See get_valid_set() details.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_pred_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the mean prediction of the validation set ‚Äî get_pred_mean","text":"mean predicted target variable.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the next split of a tree ‚Äî get_split","title":"Helper to get the next split of a tree ‚Äî get_split","text":"Helper get next split tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the next split of a tree ‚Äî get_split","text":"","code":"get_split(candidates, x_data)"},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the next split of a tree ‚Äî get_split","text":"candidates (list) sensible splits tree's terminal nodes. See get_candidates() details. x_data (data.frame) feature data matrix.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the next split of a tree ‚Äî get_split","text":"List specifying next split","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to retrieve validation set and predictions ‚Äî get_valid_set","title":"Helper to retrieve validation set and predictions ‚Äî get_valid_set","text":"Helper retrieve validation set predictions","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to retrieve validation set and predictions ‚Äî get_valid_set","text":"","code":"get_valid_set(data, target, learner, cv_folds, treatment = NULL)"},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to retrieve validation set and predictions ‚Äî get_valid_set","text":"data (data.frame). target (string) name target variable. learner (model_spec object) learner training prediction model. See parsnip::model_spec() details. cv_folds (count) number CV+ folds. treatment (string) name treatment variable, applicable.","code":""},{"path":"https://holgstr.github.io/conftree/reference/get_valid_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to retrieve validation set and predictions ‚Äî get_valid_set","text":"Data frame predictions indices.","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to grow the tree by splitting a terminal node ‚Äî grow_node","title":"Helper to grow the tree by splitting a terminal node ‚Äî grow_node","text":"Helper grow tree splitting terminal node","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to grow the tree by splitting a terminal node ‚Äî grow_node","text":"","code":"grow_node(node, split, x_data)"},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to grow the tree by splitting a terminal node ‚Äî grow_node","text":"node (partynode) current tree structure. See partykit::partynode() details. split (list) next split. See get_split() details. x_data (data.frame) feature data matrix.","code":""},{"path":"https://holgstr.github.io/conftree/reference/grow_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to grow the tree by splitting a terminal node ‚Äî grow_node","text":"updated tree structure.","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a conftree ‚Äî plot.conftree","title":"Plot a conftree ‚Äî plot.conftree","text":"Plot conftree","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a conftree ‚Äî plot.conftree","text":"","code":"# S3 method for class 'conftree' plot(x, ...)"},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a conftree ‚Äî plot.conftree","text":"x (conftree) tree containing detected subgroups. ... additional arguments.","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a conftree ‚Äî plot.conftree","text":"plot.","code":""},{"path":"https://holgstr.github.io/conftree/reference/plot.conftree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a conftree ‚Äî plot.conftree","text":"","code":"library(tidymodels) #> ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymodels 1.2.0 ‚îÄ‚îÄ #> ‚úî broom        1.0.7     ‚úî recipes      1.1.1 #> ‚úî dials        1.4.0     ‚úî rsample      1.2.1 #> ‚úî dplyr        1.1.4     ‚úî tibble       3.2.1 #> ‚úî ggplot2      3.5.1     ‚úî tidyr        1.3.1 #> ‚úî infer        1.0.7     ‚úî tune         1.2.1 #> ‚úî modeldata    1.4.0     ‚úî workflows    1.2.0 #> ‚úî parsnip      1.3.0     ‚úî workflowsets 1.1.0 #> ‚úî purrr        1.0.4     ‚úî yardstick    1.3.2 #> ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidymodels_conflicts() ‚îÄ‚îÄ #> ‚úñ purrr::discard() masks scales::discard() #> ‚úñ dplyr::filter()  masks stats::filter() #> ‚úñ dplyr::lag()     masks stats::lag() #> ‚úñ recipes::step()  masks stats::step() #> ‚Ä¢ Use tidymodels_prefer() to resolve common conflicts. library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest(trees = 200, min_n = 5) %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\") groups <- r2p(   data = bikes,   target = \"count\",   learner = randforest,   cv_folds = 2,   alpha = 0.1,   gamma = 0.2,   lambda = 0.5,   max_groups = 3 ) plot(groups)"},{"path":"https://holgstr.github.io/conftree/reference/print.conftree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a conftree ‚Äî print.conftree","title":"Print a conftree ‚Äî print.conftree","text":"Print conftree","code":""},{"path":"https://holgstr.github.io/conftree/reference/print.conftree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a conftree ‚Äî print.conftree","text":"","code":"# S3 method for class 'conftree' print(x, ...)"},{"path":"https://holgstr.github.io/conftree/reference/print.conftree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a conftree ‚Äî print.conftree","text":"x (conftree) tree containing detected subgroups. ... additional arguments.","code":""},{"path":"https://holgstr.github.io/conftree/reference/print.conftree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a conftree ‚Äî print.conftree","text":"","code":"library(tidymodels) library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest(trees = 200, min_n = 5) %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\") groups <- r2p(   data = bikes,   target = \"count\",   learner = randforest,   cv_folds = 2,   alpha = 0.05,   gamma = 0.2,   lambda = 0.5,   max_groups = 3 ) print(groups) #> Conformal tree with 2 subgroups: #> [1] root #> |   [2] workingday in False: * #> |   [3] workingday in True: * #> --- #> * terminal nodes (subgroups)"},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to find all sensible splits in a covariate ‚Äî process_covariate","title":"Helper to find all sensible splits in a covariate ‚Äî process_covariate","text":"Helper find sensible splits covariate","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to find all sensible splits in a covariate ‚Äî process_covariate","text":"","code":"process_covariate(   var_name,   x_data,   node_id,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to find all sensible splits in a covariate ‚Äî process_covariate","text":"var_name (string) name feature split. x_data (data.frame) feature data matrix. node_id (count) parent node identifier. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident homogeneity parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_covariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to find all sensible splits in a covariate ‚Äî process_covariate","text":"List sensible splits covariate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to find all sensible splits in a parent node ‚Äî process_node","title":"Helper to find all sensible splits in a parent node ‚Äî process_node","text":"Helper find sensible splits parent node","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to find all sensible splits in a parent node ‚Äî process_node","text":"","code":"process_node(x_data, node_id, valid_set, alpha, gamma, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to find all sensible splits in a parent node ‚Äî process_node","text":"x_data (data.frame) feature data matrix. node_id (count) parent node identifier. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to find all sensible splits in a parent node ‚Äî process_node","text":"List sensible splits parent node.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident homogeneity of a split ‚Äî process_split_config","title":"Helper to compute the gain in confident homogeneity of a split ‚Äî process_split_config","text":"Helper compute gain confident homogeneity split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident homogeneity of a split ‚Äî process_split_config","text":"","code":"process_split_config(   ids_left,   ids_right,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident homogeneity of a split ‚Äî process_split_config","text":"ids_left (integer) ids left child node. ids_right (integer) ids right child node. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident homogeneity parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident homogeneity of a split ‚Äî process_split_config","text":"confident homogeneity split.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident homogeneity of a categorical split ‚Äî process_split_config_categorical","title":"Helper to compute the gain in confident homogeneity of a categorical split ‚Äî process_split_config_categorical","text":"Helper compute gain confident homogeneity categorical split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident homogeneity of a categorical split ‚Äî process_split_config_categorical","text":"","code":"process_split_config_categorical(   node_id,   var_name,   split_cand,   x_data,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident homogeneity of a categorical split ‚Äî process_split_config_categorical","text":"node_id (count) parent node identifier. var_name (string) name feature split. split_cand (character) split point, set categories representing left child node. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident homogeneity parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident homogeneity of a categorical split ‚Äî process_split_config_categorical","text":"List elements node_id, feature, feature_type, split_cand, ids_left_child, ids_right_child gain.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the gain in confident homogeneity of a numeric split ‚Äî process_split_config_numeric","title":"Helper to compute the gain in confident homogeneity of a numeric split ‚Äî process_split_config_numeric","text":"Helper compute gain confident homogeneity numeric split","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the gain in confident homogeneity of a numeric split ‚Äî process_split_config_numeric","text":"","code":"process_split_config_numeric(   node_id,   var_name,   split_cand,   x_data,   valid_set,   crit_node,   alpha,   gamma,   lambda )"},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the gain in confident homogeneity of a numeric split ‚Äî process_split_config_numeric","text":"node_id (count) parent node identifier. var_name (string) name feature split. split_cand (number) value split point. x_data (data.frame) feature data matrix. valid_set (data.frame) validation set. See get_valid_set() details. crit_node (number) confident homogeneity parent node. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/process_split_config_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the gain in confident homogeneity of a numeric split ‚Äî process_split_config_numeric","text":"List elements node_id, feature, feature_type, split_cand, ids_left_child, ids_right_child gain.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding Subgroups with Conformal Trees ‚Äî r2p","title":"Finding Subgroups with Conformal Trees ‚Äî r2p","text":"Finding Subgroups Conformal Trees","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding Subgroups with Conformal Trees ‚Äî r2p","text":"","code":"r2p(   data,   target,   learner,   cv_folds = 10,   alpha = 0.05,   gamma = 0.1,   lambda = 0.5,   max_groups = 10 )"},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding Subgroups with Conformal Trees ‚Äî r2p","text":"data (data.frame) data set model training uncertainty estimation. target (string) name target variable. target must numeric variable. learner (model_spec) learner training prediction model. See parsnip::model_spec() details. cv_folds (count) number CV+ folds. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance parameter, quantifying impact average interval length relative average absolute deviation (.e. interval width vs. average absolute deviation) max_groups (count) maximum number subgroups.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding Subgroups with Conformal Trees ‚Äî r2p","text":"tree.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding Subgroups with Conformal Trees ‚Äî r2p","text":"","code":"library(tidymodels) library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest() %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\") groups <- r2p(   data = bikes,   target = \"count\",   learner = randforest,   cv_folds = 10,   alpha = 0.05,   gamma = 0.2,   lambda = 0.5,   max_groups = 10 ) groups$tree #> [1] root: *"},{"path":"https://holgstr.github.io/conftree/reference/r2p_hte.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","title":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","text":"Finding Subgroups Treatment Effects Conformal Trees","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p_hte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","text":"","code":"r2p_hte(   data,   target,   treatment,   learner,   cv_folds = 10,   alpha = 0.05,   gamma = 0.1,   lambda = 0.5,   max_groups = 10 )"},{"path":"https://holgstr.github.io/conftree/reference/r2p_hte.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","text":"data (data.frame) data set model training uncertainty estimation. target (string) name target variable. target must numeric variable. treatment (string) name treatment variable. treatment factor, first level treated control second level treatment indicator. treatment numeric, zero-one encoding assumed \"1\" treated treatment indicator. learner (model_spec) learner training prediction model. See parsnip::model_spec() details. cv_folds (count) number CV+ folds. alpha (proportion) miscoverage rate. gamma (proportion) regularization parameter ensuring reduction impurity confident homogeneity sufficiently large. lambda (proportion) balance parameter, quantifying impact average interval length relative average absolute deviation (.e. interval width vs. average absolute deviation) max_groups (count) maximum number subgroups.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p_hte.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","text":"tree.","code":""},{"path":"https://holgstr.github.io/conftree/reference/r2p_hte.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding Subgroups in Treatment Effects with Conformal Trees ‚Äî r2p_hte","text":"","code":"library(tidymodels) library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest() %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\") groups <- r2p_hte(   data = bikes,   target = \"count\",   treatment = \"year\",   learner = randforest,   cv_folds = 10,   alpha = 0.05,   gamma = 0.2,   lambda = 0.5,   max_groups = 10 ) groups$tree #> [1] root: *"},{"path":"https://holgstr.github.io/conftree/reference/round_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to round numbers according to their magnitude ‚Äî round_plot","title":"Helper to round numbers according to their magnitude ‚Äî round_plot","text":"Helper round numbers according magnitude","code":""},{"path":"https://holgstr.github.io/conftree/reference/round_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to round numbers according to their magnitude ‚Äî round_plot","text":"","code":"round_plot(x, sig = 2)"},{"path":"https://holgstr.github.io/conftree/reference/round_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to round numbers according to their magnitude ‚Äî round_plot","text":"x (numeric) number round. sig (number) non-zero decimal digits consider rounding.","code":""},{"path":"https://holgstr.github.io/conftree/reference/round_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to round numbers according to their magnitude ‚Äî round_plot","text":"Rounded number.","code":""},{"path":"https://holgstr.github.io/conftree/reference/summary.conftree.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary for a conftree ‚Äî summary.conftree","title":"Prints summary for a conftree ‚Äî summary.conftree","text":"Prints summary conftree","code":""},{"path":"https://holgstr.github.io/conftree/reference/summary.conftree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary for a conftree ‚Äî summary.conftree","text":"","code":"# S3 method for class 'conftree' summary(object, ...)"},{"path":"https://holgstr.github.io/conftree/reference/summary.conftree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary for a conftree ‚Äî summary.conftree","text":"object (conftree) tree containing detected subgroups. ... additional arguments.","code":""},{"path":"https://holgstr.github.io/conftree/reference/summary.conftree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints summary for a conftree ‚Äî summary.conftree","text":"","code":"library(tidymodels) library(ranger) data(bikes) set.seed(1234) randforest <- rand_forest(trees = 200, min_n = 5) %>%   set_mode(\"regression\") %>%   set_engine(\"ranger\") groups <- r2p(   data = bikes,   target = \"count\",   learner = randforest,   cv_folds = 2,   alpha = 0.05,   gamma = 0.2,   lambda = 0.5,   max_groups = 3 ) summary(groups) #> Conformal tree with 2 subgroups: #>     n   mean  width deviation #> 1 231  49.91  85.53      1.07 #> 2 496 289.73 249.85     13.75 #> --- #> Alpha:  0.05 Lambda:  0.5 Gamma:  0.2"},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the total absolute deviation of a candidate split ‚Äî total_dev","title":"Helper to compute the total absolute deviation of a candidate split ‚Äî total_dev","text":"Helper compute total absolute deviation candidate split","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the total absolute deviation of a candidate split ‚Äî total_dev","text":"","code":"total_dev(valid_set, ids_left, ids_right, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the total absolute deviation of a candidate split ‚Äî total_dev","text":"valid_set (data.frame) validation set. See get_valid_set() details. ids_left (integer) ids left child node. ids_right (integer) ids right child node. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the total absolute deviation of a candidate split ‚Äî total_dev","text":"total absolute deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to compute the total conformal interval length of a candidate split ‚Äî total_width","title":"Helper to compute the total conformal interval length of a candidate split ‚Äî total_width","text":"Helper compute total conformal interval length candidate split","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to compute the total conformal interval length of a candidate split ‚Äî total_width","text":"","code":"total_width(valid_set, ids_left, ids_right, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to compute the total conformal interval length of a candidate split ‚Äî total_width","text":"valid_set (data.frame) validation set. See get_valid_set() details. ids_left (integer) ids left child node. ids_right (integer) ids right child node. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/total_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to compute the total conformal interval length of a candidate split ‚Äî total_width","text":"total conformal interval length.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get absolute deviation for all inner and outer nodes in a tree ‚Äî tree_dev","title":"Helper to get absolute deviation for all inner and outer nodes in a tree ‚Äî tree_dev","text":"Helper get absolute deviation inner outer nodes tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get absolute deviation for all inner and outer nodes in a tree ‚Äî tree_dev","text":"","code":"tree_dev(tree, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/tree_dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get absolute deviation for all inner and outer nodes in a tree ‚Äî tree_dev","text":"tree (party) tree object. See partykit::party() details. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get absolute deviation for all inner and outer nodes in a tree ‚Äî tree_dev","text":"List absolute deviation tree's nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_homogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get confident homogeneity for all inner and outer nodes in a tree ‚Äî tree_homogeneity","title":"Helper to get confident homogeneity for all inner and outer nodes in a tree ‚Äî tree_homogeneity","text":"Helper get confident homogeneity inner outer nodes tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_homogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get confident homogeneity for all inner and outer nodes in a tree ‚Äî tree_homogeneity","text":"","code":"tree_homogeneity(tree, valid_set, alpha, lambda)"},{"path":"https://holgstr.github.io/conftree/reference/tree_homogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get confident homogeneity for all inner and outer nodes in a tree ‚Äî tree_homogeneity","text":"tree (party) tree object. See partykit::party() details. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate. lambda (proportion) balance width deviation.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_homogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get confident homogeneity for all inner and outer nodes in a tree ‚Äî tree_homogeneity","text":"List confident homogeneity tree's nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_predmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the mean prediction for all inner and outer nodes in a tree ‚Äî tree_predmean","title":"Helper to get the mean prediction for all inner and outer nodes in a tree ‚Äî tree_predmean","text":"Helper get mean prediction inner outer nodes tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_predmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the mean prediction for all inner and outer nodes in a tree ‚Äî tree_predmean","text":"","code":"tree_predmean(tree, valid_set)"},{"path":"https://holgstr.github.io/conftree/reference/tree_predmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the mean prediction for all inner and outer nodes in a tree ‚Äî tree_predmean","text":"tree (party) tree object. See partykit::party() details. valid_set (data.frame) validation set. See get_valid_set() details.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_predmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the mean prediction for all inner and outer nodes in a tree ‚Äî tree_predmean","text":"List mean prediction tree's nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get the variances across and within a tree's terminal nodes ‚Äî tree_vars","title":"Helper to get the variances across and within a tree's terminal nodes ‚Äî tree_vars","text":"Helper get variances across within tree's terminal nodes","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get the variances across and within a tree's terminal nodes ‚Äî tree_vars","text":"","code":"tree_vars(tree, target)"},{"path":"https://holgstr.github.io/conftree/reference/tree_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get the variances across and within a tree's terminal nodes ‚Äî tree_vars","text":"tree (party) tree object. See partykit::party() details. target (string) name target variable. target must numeric variable.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get the variances across and within a tree's terminal nodes ‚Äî tree_vars","text":"Variance across within tree's terminal nodes.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to get conformal interval width for all inner and outer nodes in a tree ‚Äî tree_width","title":"Helper to get conformal interval width for all inner and outer nodes in a tree ‚Äî tree_width","text":"Helper get conformal interval width inner outer nodes tree","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to get conformal interval width for all inner and outer nodes in a tree ‚Äî tree_width","text":"","code":"tree_width(tree, valid_set, alpha)"},{"path":"https://holgstr.github.io/conftree/reference/tree_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to get conformal interval width for all inner and outer nodes in a tree ‚Äî tree_width","text":"tree (party) tree object. See partykit::party() details. valid_set (data.frame) validation set. See get_valid_set() details. alpha (proportion) miscoverage rate.","code":""},{"path":"https://holgstr.github.io/conftree/reference/tree_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to get conformal interval width for all inner and outer nodes in a tree ‚Äî tree_width","text":"List conformal interval width tree's nodes.","code":""}]
